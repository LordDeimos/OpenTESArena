PROJECT(TESArena CXX)

SET(OpenTESArena_VERSION "0.8.0")


if(NOT glbinding_DIR)
	set(glbinding_DIR "" CACHE PATH "glbinding Directory")
endif()

FIND_PACKAGE(SDL2 REQUIRED)
FIND_PACKAGE(OpenAL REQUIRED)
FIND_PACKAGE(WildMidi)
FIND_PACKAGE(OpenGL)
FIND_PACKAGE(glbinding)

SET(EXTERNAL_LIBS ${OPENAL_LIBRARY} ${SDL2_LIBRARY})
INCLUDE_DIRECTORIES ("${CMAKE_SOURCE_DIR}" ${SDL2_INCLUDE_DIR} ${OPENAL_INCLUDE_DIR})
IF(WILDMIDI_FOUND)
    SET(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${WILDMIDI_LIBRARIES})
    INCLUDE_DIRECTORIES(${WILDMIDI_INCLUDE_DIRS})
    ADD_DEFINITIONS("-DHAVE_WILDMIDI=1")
ELSE(WILDMIDI_FOUND)
    MESSAGE(STATUS "WildMidi not found, no MIDI support!")
ENDIF(WILDMIDI_FOUND)

IF(OPENGL_FOUND)
    SET(EXTERNAL_LIBS ${EXTERNAL_LIBS} ${OPENGL_LIBRARIES})
    INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIRS})
ELSE(OPENGL_FOUND)
    MESSAGE(STATUS "OpenGL not found, no Hardware Rendering support!!")
ENDIF(OPENGL_FOUND)

IF(glbinding_FOUND)
    SET(EXTERNAL_LIBS ${EXTERNAL_LIBS} glbinding::glbinding)
ELSE(glbinding_FOUND)
    MESSAGE(STATUS "glbinding not found, no Hardware Rendering support!!")
ENDIF(glbinding_FOUND)

IF(OPENGL_FOUND AND glbinding_FOUND)
    ADD_DEFINITIONS("-DHAVE_OPENGL=1")
ENDIF(OPENGL_FOUND AND glbinding_FOUND)

SET(SRC_ROOT ${TESArena_SOURCE_DIR})

FILE(GLOB_RECURSE TES_ASSETS
    ${SRC_ROOT}/src/Assets/*.h* 
    ${SRC_ROOT}/src/Assets/*.c*)

FILE(GLOB_RECURSE TES_ENTITIES
    ${SRC_ROOT}/src/Entities/*.h* 
    ${SRC_ROOT}/src/Entities/*.c*)

FILE(GLOB_RECURSE TES_GAME
    ${SRC_ROOT}/src/Game/*.h* 
    ${SRC_ROOT}/src/Game/*.c*)

FILE(GLOB_RECURSE TES_INTERFACE
    ${SRC_ROOT}/src/Interface/*.h* 
    ${SRC_ROOT}/src/Interface/*.c*)

FILE(GLOB_RECURSE TES_ITEMS
    ${SRC_ROOT}/src/Items/*.h* 
    ${SRC_ROOT}/src/Items/*.c*)

FILE(GLOB_RECURSE TES_MATH
    ${SRC_ROOT}/src/Math/*.h* 
    ${SRC_ROOT}/src/Math/*.c*)

FILE(GLOB_RECURSE TES_MEDIA
    ${SRC_ROOT}/src/Media/*.h* 
    ${SRC_ROOT}/src/Media/*.c*)

FILE(GLOB_RECURSE TES_RENDERING
    ${SRC_ROOT}/src/Rendering/*.h* 
    ${SRC_ROOT}/src/Rendering/*.c*)

FILE(GLOB_RECURSE TES_UTILITIES
    ${SRC_ROOT}/src/Utilities/*.h* 
    ${SRC_ROOT}/src/Utilities/*.c*)

FILE(GLOB_RECURSE TES_WORLD
    ${SRC_ROOT}/src/World/*.h* 
    ${SRC_ROOT}/src/World/*.c*)

SET(TES_MAIN ${SRC_ROOT}/src/Main.cpp)

SET(TES_RESOURCES ${CMAKE_SOURCE_DIR}/windows/opentesarena.rc)

SET(TES_SOURCES 
    ${TES_ASSETS}
    ${TES_ENTITIES}
    ${TES_GAME}
    ${TES_INTERFACE}
    ${TES_ITEMS}
    ${TES_MATH}
    ${TES_MEDIA}
    ${TES_RENDERING}
    ${TES_UTILITIES}
    ${TES_WORLD}
    ${TES_MAIN})

SET(TES_DATA_FOLDER ${CMAKE_SOURCE_DIR}/data)
SET(TES_OPTIONS_FOLDER ${CMAKE_SOURCE_DIR}/options)

IF (WIN32)
    LIST(APPEND TES_SOURCES ${TES_RESOURCES})
    ADD_DEFINITIONS("-D_SCL_SECURE_NO_WARNINGS=1")
ENDIF()

IF (NOT APPLE)
    # Copy over required files
    FILE(COPY ${TES_DATA_FOLDER} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
    FILE(COPY ${TES_OPTIONS_FOLDER} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

    # Add the rest
    ADD_EXECUTABLE (TESArena ${TES_SOURCES})
ELSE (APPLE)
    # Info.plist properties
    SET(MACOSX_BUNDLE_LONG_VERSION_STRING ${OpenTESArena_VERSION})
    SET(MACOSX_BUNDLE_SHORT_VERSION_STRING ${OpenTESArena_VERSION})

    # Icon
    ## Find the file in source code
    SET(TES_MAC_ICON ${CMAKE_SOURCE_DIR}/macOS/OpenTESArena.icns)
    ## Set the destination location to the standard .app location
    SET_SOURCE_FILES_PROPERTIES(${TES_MAC_ICON} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
    ## Write the filename to the Info.plist file
    SET(MACOSX_BUNDLE_ICON_FILE OpenTESArena.icns)

    # Copy over required files
    # Using direct copy workaround because SET_SOURCE_FILES_PROPERTIES doesn't work recursively due to bug in CMake.
    # See https://gitlab.kitware.com/cmake/cmake/issues/16886
    FILE(COPY ${TES_DATA_FOLDER} DESTINATION ../TESArena.app/Contents/Resources)
    FILE(COPY ${TES_OPTIONS_FOLDER} DESTINATION ../TESArena.app/Contents/Resources)

    # Add the rest
    ADD_EXECUTABLE (TESArena MACOSX_BUNDLE ${TES_SOURCES} ${TES_MAC_ICON})
ENDIF()

TARGET_LINK_LIBRARIES(TESArena components ${EXTERNAL_LIBS})
SET_TARGET_PROPERTIES(TESArena PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${OpenTESArena_BINARY_DIR})

# Visual Studio filters.
SOURCE_GROUP("Assets" FILES ${TES_ASSETS})
SOURCE_GROUP("Entities" FILES ${TES_ENTITIES})
SOURCE_GROUP("Game" FILES ${TES_GAME})
SOURCE_GROUP("Interface" FILES ${TES_INTERFACE})
SOURCE_GROUP("Items" FILES ${TES_ITEMS})
SOURCE_GROUP("Math" FILES ${TES_MATH})
SOURCE_GROUP("Media" FILES ${TES_MEDIA})
SOURCE_GROUP("Rendering" FILES ${TES_RENDERING})
SOURCE_GROUP("Utilities" FILES ${TES_UTILITIES})
SOURCE_GROUP("World" FILES ${TES_WORLD})
SOURCE_GROUP("Main" FILES ${TES_MAIN})
SOURCE_GROUP("Resources" FILES ${TES_RESOURCES})
